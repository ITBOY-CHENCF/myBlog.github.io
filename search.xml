<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Web网络基础</title>
      <link href="/2020/07/23/web-an-quan-ji-chu/"/>
      <url>/2020/07/23/web-an-quan-ji-chu/</url>
      
        <content type="html"><![CDATA[<h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><ul><li><strong>概述</strong></li></ul><p><code>HTTP</code> 协议(超文本传输协议HyperText Transfer Protocol)，它是基于TCP协议的应用层传输协议，简单来说就是客户端和服务端进行数据传输的一种规则。</p><blockquote><p><strong>注意：</strong>客户端与服务器的角色不是固定的，一端充当客户端，也可能在某次请求中充当服务器。这取决与请求的发起端。HTTP协议属于应用层，建立在传输层协议TCP之上。客户端通过与服务器建立TCP连接，之后发送HTTP请求与接收HTTP响应都是通过访问Socket接口来调用TCP协议实现。</p></blockquote><p><code>HTTP</code> 是一种<strong>无状态</strong> (stateless) 协议, <code>HTTP</code>协议本身不会对发送过的请求和相应的通信状态进行持久化处理。这样做的目的是为了保持HTTP协议的简单性，从而能够快速处理大量的事务, 提高效率。</p><p>然而，在许多应用场景中，我们需要保持用户登录的状态或记录用户购物车中的商品。由于<code>HTTP</code>是无状态协议，所以必须引入一些技术来记录管理状态，例如<code>Cookie</code>。</p><hr><ul><li><strong>URL</strong></li></ul><p><code>HTTP URL</code> 包含了用于查找某个资源的详细信息, 格式如下:</p><pre><code>http://host[&quot;:&quot;port][abs_path]</code></pre><hr><ul><li><p><strong>请求（Request）</strong></p><p><code>HTTP</code>请求由三部分构成: 请求行 请求头 请求正文</p></li></ul><p><img src="http://106.52.86.96/202007030805/2905385-d3d809845229a31b.png" alt=""></p><p><img src="http://106.52.86.96/202007030805/image-20200718153834398.png" alt=""></p><blockquote><p>①是请求方法，<strong>GET</strong>和<strong>POST</strong>是最常见的HTTP方法，除此以外还包括DELETE、HEAD、OPTIONS、PUT、TRACE。不过，当前的大多数浏览器只支持GET和POST<br> ②为请求对应的URL地址，它和报文头的Host属性组成完整的请求URL，③是协议名称及版本号。<br> ④是HTTP的报文头，报文头包含若干个属性，格式为“属性名:属性值”，服务端据此获取客户端的信息。<br> ⑤是报文体，它将一个页面表单中的组件值通过<strong>param1=value1&amp;param2=value2</strong>的键值对形式编码成一个格式化串，它承载多个请求参数的数据。不但报文体可以传递请求参数，请求也可以通过<strong>/chapter15/user.html? param1=value1&amp;param2=value2</strong>的方式传递请求参数。</p></blockquote><hr><p>常见的报文头的属性</p><table><thead><tr><th align="left">字段</th><th align="left">说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">Accept</td><td align="left">可接收的响应内容类型</td><td align="left">Accept:text/plain (文本类型)</td></tr><tr><td align="left">Accept-Charset</td><td align="left">可接收的字符集</td><td align="left">Accept-Charset: utf-8</td></tr><tr><td align="left">Accept-Encoding</td><td align="left">可接受的响应内容的编码方式</td><td align="left">Accept-Encoding: gzip, deflate</td></tr><tr><td align="left">Accept-Language</td><td align="left">可接受的响应内容语言列表</td><td align="left">Accept-Language: en-US</td></tr><tr><td align="left">Accept-Datetime</td><td align="left">可接受的按照时间来表示的响应内容版本</td><td align="left">Accept-Datetime: Sat, 26 Dec 2015 17:30:00 GMT</td></tr><tr><td align="left">Authorization</td><td align="left">HTTP协议中需要认证资源的认证信息</td><td align="left">Authorization: Basic OSdjJGRpbjpvcGVuIANlc2SdDE==</td></tr><tr><td align="left">Cache-Control</td><td align="left">请求/回复中的,是否使用缓存机制</td><td align="left">Cache-Control: no-cache</td></tr><tr><td align="left">Connection</td><td align="left">客户端想要优先使用的连接类型</td><td align="left">Connection: keep-alive Connection: Upgrade</td></tr><tr><td align="left">Content-Length</td><td align="left">以8进制表示的请求体的长度</td><td align="left">Content-Length: 348</td></tr><tr><td align="left"><strong>Content-Type</strong></td><td align="left">请求体的MIME类型</td><td align="left">Content-Type: application/x-www-form-urlencoded</td></tr><tr><td align="left">Date</td><td align="left">发送该消息的日期和时间</td><td align="left">Date: Dec, 26 Dec 2015 17:30:00 GMT</td></tr><tr><td align="left">Expect</td><td align="left">表示客户端要求服务器做出特定的行为</td><td align="left">Expect: 100-continue</td></tr><tr><td align="left">From</td><td align="left">发起此请求的用户的邮件地址</td><td align="left">From: <a href="mailto:user@itbilu.com">user@itbilu.com</a></td></tr><tr><td align="left">Host</td><td align="left">服务器域名和端口号,默认端口可省略</td><td align="left">Host: <a href="http://www.itbilu.com:80" target="_blank" rel="noopener">www.itbilu.com:80</a> or <a href="http://www.itbilu.com" target="_blank" rel="noopener">www.itbilu.com</a></td></tr><tr><td align="left">If-Match</td><td align="left">主要用于PUT,实体匹配才可以操作</td><td align="left">If-Match: “9jd00cdj34pss9ejqiw39d82f20d0ikd”</td></tr><tr><td align="left">If-Modified-Since</td><td align="left">资源未被修改的情况下返回304未修改</td><td align="left">If-Modified-Since: Dec, 26 Dec 2015 17:30:00 GMT</td></tr><tr><td align="left"><strong>User-Agent</strong></td><td align="left">浏览器的身份标识字符串</td><td align="left">User-Agent: Mozilla/</td></tr><tr><td align="left">Upgrade</td><td align="left">要求服务器升级到一个高版本协议</td><td align="left">Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</td></tr><tr><td align="left">Via</td><td align="left">告诉服务器,这个请求是由哪个代理发出的</td><td align="left">Via: 1.0 fred, 1.1 itbilu.com.com (Apache/1.1)</td></tr><tr><td align="left">Referer</td><td align="left">表示跳转到当前页面的之前的页面</td><td align="left">Referer: <a href="http://itbilu.com/nodejs" target="_blank" rel="noopener">http://itbilu.com/nodejs</a></td></tr><tr><td align="left">Origin</td><td align="left">发起一个针对跨域资源共享的请求</td><td align="left">Origin: <a href="http://www.itbilu.com" target="_blank" rel="noopener">http://www.itbilu.com</a></td></tr></tbody></table><hr><ul><li><strong>响应(Response)</strong></li></ul><p>在接收到请求之后,服务器经过解释之后,会返回个一个HTTP响应<br><code>HTTP</code>响应是由四部分构成:状态行 响应头 空行 响应体</p><p><img src="http://106.52.86.96/202007030805/2905385-64cf3822d8ed347f.png" alt="2905385-64cf3822d8ed347f"></p><p><code>HTTP</code>响应的第一行都是状态行，依次是当前HTTP版本号，3位数字组成的状态代码，以及描述状态的短语，彼此由空格分隔。</p><p>状态代码的第一个数字代表当前响应的类型：</p><ul><li>1xx消息——请求已被服务器接收，继续处理</li><li>2xx成功——请求已成功被服务器接收、理解、并接受</li><li>3xx重定向——需要后续操作才能完成这一请求</li><li>4xx请求错误——请求含有词法错误或者无法被执行</li><li>5xx服务器错误——服务器在处理某个正确请求时发生错误</li></ul><hr><h4 id="CTF攻防比赛"><a href="#CTF攻防比赛" class="headerlink" title="CTF攻防比赛"></a>CTF攻防比赛</h4><p>CTF（Capture The Flag）中文一般译作夺旗赛，在网络安全领域中指的是网络安全技术人员之间进行技术竞技的一种比赛形式。CTF起源于1996年DEFCON全球黑客大会，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。发展至今，已经成为全球范围网络安全圈流行的竞赛形式，2013年全球举办了超过五十场国际性CTF赛事。而DEFCON作为CTF赛制的发源地，DEFCON CTF也成为了目前全球最高技术水平和影响力的CTF竞赛，类似于CTF赛场中的“世界杯” 。</p><p>一、解题模式（Jeopardy）</p><p>在解题模式CTF赛制中，参赛队伍可以通过互联网或者现场网络参与，这种模式的CTF竞赛与ACM编程竞赛、信息学奥赛比较类似，以解决网络安全技术挑战题目的分值和时间来排名，通常用于在线选拔赛。题目主要包含逆向、漏洞挖掘与利用、Web渗透、密码、取证、隐写、安全编程等类别。</p><p>二、攻防模式（Attack-Defense）</p><p>在攻防模式CTF赛制中，参赛队伍在网络空间互相进行攻击和防守，挖掘网络服务漏洞并攻击对手服务来得分，修补自身服务漏洞进行防御来避免丢分。攻防模式CTF赛制可以实时通过得分反映出比赛情况，最终也以得分直接分出胜负，是一种竞争激烈，具有很强观赏性和高度透明性的网络安全赛制。在这种赛制中，不仅仅是比参赛队员的智力和技术，也比体力（因为比赛一般都会持续48小时及以上），同时也比团队之间的分工配合与合作。 [1] </p><p>三、混合模式（Mix）</p><p>结合了解题模式与攻防模式的CTF赛制，比如参赛队伍通过解题可以获取一些初始分数，然后通过攻防对抗进行得分增减的零和游戏，最终以得分高低分出胜负。采用混合模式CTF赛制的典型代表如iCTF国际CTF竞赛。</p><p>CTF常见题型：</p><p>Web网络攻防、REVERSE逆向工程、Pwn二进制漏洞利用、Crypto密码攻击、Misc安全杂项、Mobile移动安全。</p><hr><h4 id="Web安全常用工具及插件"><a href="#Web安全常用工具及插件" class="headerlink" title="Web安全常用工具及插件"></a>Web安全常用工具及插件</h4><ul><li><strong>Burp Suite</strong> 是用于攻击web 应用程序的集成平台，包含了许多工具。Burp Suite为这些工具设计了许多接口，以加快攻击应用程序的过程。所有工具都共享一个请求，并能处理对应的HTTP 消息、持久性、认证、代理、日志、警报</li></ul><p><img src="http://106.52.86.96/202007030805/20200719194500.png" alt=""></p><ul><li><strong>中国蚁剑</strong>是一款开源的跨平台网站管理工具，它主要面向于合法授权的渗透测试安全人员以及进行常规操作的网站管理员。是一款非常优秀的<strong>WebShell</strong>管理工具。</li></ul><p><img src="http://106.52.86.96/202007030805/20200719195336.png" alt=""></p><ul><li><strong>SqlMap</strong>是一个开源渗透测试工具，它可以自动检测和利用 SQL 注入漏洞并接管数据库服务器。它具有强大的检测引擎，同时有众多功能，包括数据库指纹识别、从数据库中获取数据、访问底层文件系统以及在操作系统上带内连接执行命令。</li></ul><p><img src="http://106.52.86.96/202007030805/20200719200152.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/22/hello-world/"/>
      <url>/2020/07/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
